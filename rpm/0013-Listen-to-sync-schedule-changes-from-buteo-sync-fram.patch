From 074159108657c1e53a5aa7e6ee91771fbf0b9775 Mon Sep 17 00:00:00 2001
From: Valerio Valerio <valerio.valerio@jollamobile.com>
Date: Mon, 2 Feb 2015 17:03:21 +0200
Subject: [PATCH 13/20] Listen to sync schedule changes from buteo sync
 framework.

This commit introduces d-bus listeners inside IMAP4 service to
react to changes in the account schedule related to always-on mode
and activate/deactivate IMAP IDLE.
---
 src/plugins/messageservices/imap/imap.pro     |   1 +
 .../messageservices/imap/imapclient.cpp       |  71 +++++++++---
 src/plugins/messageservices/imap/imapclient.h |   5 +-
 .../messageservices/imap/imapservice.cpp      | 102 +++++++++++++++---
 .../messageservices/imap/imapservice.h        |   3 +
 src/tools/systemd/messageserver5.service      |   2 +-
 6 files changed, 155 insertions(+), 29 deletions(-)

diff --git a/src/plugins/messageservices/imap/imap.pro b/src/plugins/messageservices/imap/imap.pro
index 1b5742b4..8a2258bd 100644
--- a/src/plugins/messageservices/imap/imap.pro
+++ b/src/plugins/messageservices/imap/imap.pro
@@ -7,6 +7,7 @@ QT = core network qmfclient qmfclient-private qmfmessageserver
 
 contains(DEFINES, USE_KEEPALIVE) {
     PKGCONFIG += keepalive
+    QT += dbus
 }
 
 contains(DEFINES,QT_QMF_USE_ALIGNEDTIMER) {
diff --git a/src/plugins/messageservices/imap/imapclient.cpp b/src/plugins/messageservices/imap/imapclient.cpp
index c2e8022e..fec1d06d 100644
--- a/src/plugins/messageservices/imap/imapclient.cpp
+++ b/src/plugins/messageservices/imap/imapclient.cpp
@@ -466,6 +466,7 @@ ImapClient::ImapClient(QObject* parent)
       _rapidClosing(false),
       _idleRetryDelay(InitialIdleRetryDelay),
       _pushConnectionsReserved(0),
+      _pushEnabled(0),
       _ssoSessionManager(0),
       _loginFailed(false),
       _sendLogin(false),
@@ -528,7 +529,8 @@ ImapClient::ImapClient(QObject* parent)
       _requestRapidClose(false),
       _rapidClosing(false),
       _idleRetryDelay(InitialIdleRetryDelay),
-      _pushConnectionsReserved(0)
+      _pushConnectionsReserved(0),
+      _pushEnabled(0)
 {
     static int count(0);
     ++count;
@@ -769,8 +771,7 @@ void ImapClient::commandTransition(ImapCommand command, OperationStatus status)
                 }
             }
 
-            // We are now connected
-            ImapConfiguration imapCfg(_config);            
+            // We are now connected          
             _waitingForIdleFolderIds = configurationIdleFolderIds();
 
             if (!_idlesEstablished
@@ -779,9 +780,17 @@ void ImapClient::commandTransition(ImapCommand command, OperationStatus status)
                 && _pushConnectionsReserved) {
                 _waitingForIdle = true;
                 emit updateStatus( tr("Logging in idle connection" ) );
+#ifdef USE_ACCOUNTS_QT
+                if (_ssoSessionManager) {
+                    ssoProcessLogin();
+                } else {
+                   monitor(_waitingForIdleFolderIds);
+                }
+#else
                 monitor(_waitingForIdleFolderIds);
+#endif
             } else {
-                if (!imapCfg.pushEnabled()) {
+                if (!pushEnabled()) {
                     foreach(const QMailFolderId &id, _monitored.keys()) {
                         IdleProtocol *protocol = _monitored.take(id);
                         protocol->close();
@@ -1770,8 +1779,7 @@ bool ImapClient::loggingIn() const
 
 bool ImapClient::idlesEstablished()
 {
-    ImapConfiguration imapCfg(_config);
-    if (!imapCfg.pushEnabled())
+    if (!pushEnabled())
         return true;
 
     return _idlesEstablished;
@@ -1794,8 +1802,9 @@ QMailFolderIdList ImapClient::configurationIdleFolderIds()
 {
     ImapConfiguration imapCfg(_config);            
     QMailFolderIdList folderIds;
-    if (!imapCfg.pushEnabled())
+    if (!pushEnabled()) {
         return folderIds;
+    }
     foreach(QString folderName, imapCfg.pushFolders()) {
         QMailFolderId idleFolderId(mailboxId(folderName));
         if (idleFolderId.isValid()) {
@@ -1811,7 +1820,7 @@ void ImapClient::monitor(const QMailFolderIdList &mailboxIds)
     
     ImapConfiguration imapCfg(_config);
     if (!_protocol.supportsCapability("IDLE")
-        || !imapCfg.pushEnabled()) {
+        || !pushEnabled()) {
         return;
     }
     
@@ -1899,6 +1908,26 @@ void ImapClient::removeAllFromBuffer(QMailMessage *message)
     }
 }
 
+bool ImapClient::pushEnabled()
+{
+    bool pushEnabled;
+#ifdef USE_KEEPALIVE
+    pushEnabled = _pushEnabled;
+#else
+    ImapConfiguration imapCfg(_config);
+    pushEnabled = imapCfg.pushEnabled();
+#endif
+    return pushEnabled;
+}
+
+void ImapClient::setPushEnabled(bool state)
+{
+    if (_pushEnabled != state) {
+        qMailLog(Messaging) << Q_FUNC_INFO << "Setting push enabled state to " << state;
+        _pushEnabled = state;
+    }
+}
+
 #ifdef USE_ACCOUNTS_QT
 void ImapClient::removeSsoIdentity(const QMailAccountId &accountId)
 {
@@ -1914,7 +1943,7 @@ void ImapClient::removeSsoIdentity(const QMailAccountId &accountId)
 
 void ImapClient::ssoProcessLogin()
 {
-    if (_loginFailed && _recreateIdentity) {
+    if ((_loginFailed && _recreateIdentity) || _waitingForIdle) {
         // if account was updated try to recreate
         // identity without asking the user for new
         // credentials
@@ -1956,6 +1985,9 @@ void ImapClient::onSsoSessionResponse(const QMap<QString,QList<QByteArray> > &ss
     if (_sendLogin) {
         _protocol.sendLogin(_config, _ssoLogin);
     }
+    if (_waitingForIdle) {
+        monitor(_waitingForIdleFolderIds);
+    }
 }
 
 void ImapClient::onSsoSessionError(const QString &error)
@@ -1987,6 +2019,14 @@ void ImapClient::onAccountsUpdated(const QMailAccountIdList &list)
         }
 
         qMailLog(IMAP) << Q_FUNC_INFO << imapCfg1.mailUserName() ;
+#ifdef USE_KEEPALIVE
+        // compare config modified by the User
+        const bool& notEqual = (imapCfg1.mailUserName() != imapCfg2.mailUserName()) ||
+                               (imapCfg1.mailPassword() != imapCfg2.mailPassword()) ||
+                               (imapCfg1.mailServer() != imapCfg2.mailServer()) ||
+                               (imapCfg1.mailPort() != imapCfg2.mailPort()) ||
+                               (imapCfg1.mailEncryption() != imapCfg2.mailEncryption());
+#else
         // compare config modified by the User
         const bool& notEqual = (imapCfg1.mailUserName() != imapCfg2.mailUserName()) ||
                                (imapCfg1.mailPassword() != imapCfg2.mailPassword()) ||
@@ -1994,33 +2034,34 @@ void ImapClient::onAccountsUpdated(const QMailAccountIdList &list)
                                (imapCfg1.mailPort() != imapCfg2.mailPort()) ||
                                (imapCfg1.mailEncryption() != imapCfg2.mailEncryption()) ||
                                (imapCfg1.pushEnabled() != imapCfg2.pushEnabled());
+#endif
         if (notEqual)
             closeIdleConnections();
 
+#ifndef USE_KEEPALIVE
         if (imapCfg1.pushEnabled() != imapCfg2.pushEnabled()) {
             if (imapCfg2.pushEnabled())
                 emit restartPushEmail();
         }
+#endif
     }
 }
+#endif
 
 void ImapClient::closeIdleConnections()
 {
     qMailLog(IMAP) << Q_FUNC_INFO << "Account was modified. Closing connections";
 
     closeConnection();
-#ifdef USE_KEEPALIVE
-    emit stopPushEmail();
-#endif
     // closing idle connections
     foreach(const QMailFolderId &id, _monitored.keys()) {
         IdleProtocol *protocol = _monitored.take(id);
-        protocol->close();
+        if (protocol->inUse()) {
+            protocol->close();
+        }
         delete protocol;
     }
     _idlesEstablished = false;
 }
 
-#endif
-
 #include "imapclient.moc"
diff --git a/src/plugins/messageservices/imap/imapclient.h b/src/plugins/messageservices/imap/imapclient.h
index 8e601980..14be3720 100644
--- a/src/plugins/messageservices/imap/imapclient.h
+++ b/src/plugins/messageservices/imap/imapclient.h
@@ -71,7 +71,6 @@ public:
     void setAccount(const QMailAccountId& accountId);
 #ifdef USE_ACCOUNTS_QT
     void removeSsoIdentity(const QMailAccountId& accountId);
-    void closeIdleConnections();
 #endif
     QMailAccountId account() const;
     void requestRapidClose() { _requestRapidClose = true; } // Close connection ASAP, unless interactive checking occurred recently
@@ -79,6 +78,7 @@ public:
     void newConnection();
     void cancelTransfer(QMailServiceAction::Status::ErrorCode code, const QString &text);
     void closeConnection();
+    void closeIdleConnections();
 
     ImapStrategyContext *strategyContext();
 
@@ -105,6 +105,8 @@ public:
     void setPushConnectionsReserved(int reserved) { _pushConnectionsReserved = reserved; }
     int idleRetryDelay() const { return _idleRetryDelay; }
     void setIdleRetryDelay(int delay) { _idleRetryDelay = delay; }
+    bool pushEnabled();
+    void setPushEnabled(bool state);
 
 signals:
     void errorOccurred(int, const QString &);
@@ -201,6 +203,7 @@ private:
     QList<QMailMessageBufferFlushCallback*> callbacks;
     QVector<QMailMessage*> _bufferedMessages;
     int _pushConnectionsReserved;
+    bool _pushEnabled;
 
     QMap<QMailMessageId,QString> detachedTempFiles;
 
diff --git a/src/plugins/messageservices/imap/imapservice.cpp b/src/plugins/messageservices/imap/imapservice.cpp
index e24e5554..3dae8ed1 100644
--- a/src/plugins/messageservices/imap/imapservice.cpp
+++ b/src/plugins/messageservices/imap/imapservice.cpp
@@ -46,6 +46,12 @@
 #include <QCoreApplication>
 #include <typeinfo>
 
+#ifdef USE_KEEPALIVE
+#include <QDBusConnection>
+#include <QtDBus>
+#include <QDBusArgument>
+#endif
+
 namespace { 
 
 const QString serviceKey("imap4");
@@ -1512,11 +1518,6 @@ ImapService::ImapService(const QMailAccountId &accountId)
       _accountWasPushEnabled(false),
       _initiatePushEmailTimer(new QTimer(this))
 {
-#ifdef USE_KEEPALIVE
-    _backgroundActivity = new BackgroundActivity(this);
-    _backgroundActivity->setWakeupFrequency(BackgroundActivity::ThirtySeconds);
-#endif
-
     QMailAccount account(accountId);
     if (!(account.status() & QMailAccount::CanSearchOnServer)) {
         account.setStatus(QMailAccount::CanSearchOnServer, true);
@@ -1531,6 +1532,23 @@ ImapService::ImapService(const QMailAccountId &accountId)
     connect(QMailStore::instance(), SIGNAL(accountsUpdated(const QMailAccountIdList&)), 
             this, SLOT(accountsUpdated(const QMailAccountIdList&)));
     connect(_initiatePushEmailTimer, SIGNAL(timeout()), this, SLOT(initiatePushEmail()));
+
+#ifdef USE_KEEPALIVE
+    _backgroundActivity = new BackgroundActivity(this);
+    _backgroundActivity->setWakeupFrequency(BackgroundActivity::ThirtySeconds);
+
+    // Connect to dbus signals emitted by buteo notifying schedule changes
+    QDBusConnection m_dBusConnection(QDBusConnection::sessionBus());
+    _accountPushEnabled = false;
+    _buteoReplyReceived = false;
+
+    if(!m_dBusConnection.isConnected()) {
+        qWarning() << Q_FUNC_INFO << "Cannot connect to Dbus";
+    }
+
+    m_dBusConnection.connect("com.meego.msyncd", "/synchronizer", "com.meego.msyncd", "syncedExternallyStatus",
+                             this, SLOT(pushEnabledStatus(uint,QString,bool)));
+#endif
 }
 
 void ImapService::enable()
@@ -1547,21 +1565,37 @@ void ImapService::enable()
     connect(_client, SIGNAL(errorOccurred(QMailServiceAction::Status::ErrorCode, QString)), this, SLOT(errorOccurred(QMailServiceAction::Status::ErrorCode, QString)));
     connect(_client, SIGNAL(updateStatus(QString)), this, SLOT(updateStatus(QString)));
     connect(_client, SIGNAL(restartPushEmail()), this, SLOT(restartPushEmail()));
-#ifdef USE_KEEPALIVE
-    connect(_client, SIGNAL(stopPushEmail()), this, SLOT(stopPushEmail()));
-#endif
 
     QMailAccountConfiguration accountCfg(_accountId);
     ImapConfiguration imapCfg(accountCfg);
-    _accountWasPushEnabled = imapCfg.pushEnabled();
+    bool pushEnabled;
+#ifdef USE_KEEPALIVE
+    _client->setPushEnabled(_accountPushEnabled);
+    // When account is enabled or account state changes, request push status from buteo scheduler
+    if (imapCfg.pushCapable() && !_buteoReplyReceived) {
+        _accountWasPushEnabled = false;
+        pushEnabled = false;
+        QDBusMessage message = QDBusMessage::createMethodCall("com.meego.msyncd", "/synchronizer", "com.meego.msyncd",
+                                                              "isSyncedExternally");
+        uint acct = _accountId.toULongLong();
+        message.setArguments(QVariantList() << acct << "syncemail");
+        QDBusConnection::sessionBus().asyncCall(message);
+    } else {
+        _accountWasPushEnabled = _accountPushEnabled;
+        pushEnabled = _accountPushEnabled;
+    }
+#else
+    pushEnabled = imapCfg.pushEnabled();
+    _accountWasPushEnabled = pushEnabled;
+#endif
     _previousPushFolders = imapCfg.pushFolders();
     _previousConnectionSettings = connectionSettings(imapCfg);
     
-    if (imapCfg.pushEnabled() && imapCfg.pushFolders().count()) {
+    if (pushEnabled && imapCfg.pushFolders().count()) {
         _client->setPushConnectionsReserved(reservePushConnections(imapCfg.pushFolders().count()));
     }
     
-    if (imapCfg.pushEnabled() && _client->pushConnectionsReserved()) {
+    if (pushEnabled && _client->pushConnectionsReserved()) {
         if (!_initiatePushDelay.contains(_accountId)) {
             _initiatePushDelay.insert(_accountId, 0);
         } else if (_initiatePushDelay[_accountId] == 0) {
@@ -1595,7 +1629,11 @@ void ImapService::disable()
         }
     }
     _accountWasEnabled = false;
+#ifdef USE_KEEPALIVE
+    _accountWasPushEnabled = _accountPushEnabled;
+#else
     _accountWasPushEnabled = imapCfg.pushEnabled();
+#endif
     _previousPushFolders = imapCfg.pushFolders();
     _previousConnectionSettings = connectionSettings(imapCfg);
     _restartPushEmailTimer->stop();
@@ -1622,7 +1660,12 @@ void ImapService::accountsUpdated(const QMailAccountIdList &ids)
     QMailAccountConfiguration accountCfg(_accountId);
     ImapConfiguration imapCfg(accountCfg);
     bool isEnabled(account.status() & QMailAccount::Enabled);
-    bool isPushEnabled(imapCfg.pushEnabled());
+    bool isPushEnabled;
+#ifdef USE_KEEPALIVE
+    isPushEnabled = _accountPushEnabled;
+#else
+    isPushEnabled = imapCfg.pushEnabled();
+#endif
     QStringList pushFolders(imapCfg.pushFolders());
     QString newConnectionSettings(connectionSettings(imapCfg));
     bool loggingIn = false;
@@ -1657,7 +1700,11 @@ void ImapService::accountsUpdated(const QMailAccountIdList &ids)
         }
     } else {
         // Update the settings
+#ifdef USE_KEEPALIVE
+        _accountWasPushEnabled = _accountPushEnabled;
+#else
         _accountWasPushEnabled = imapCfg.pushEnabled();
+#endif
         _previousPushFolders = imapCfg.pushFolders();
         _previousConnectionSettings = connectionSettings(imapCfg);
     }
@@ -1733,6 +1780,12 @@ void ImapService::initiatePushEmail()
         _backgroundActivity->stop();
         qMailLog(Messaging) << Q_FUNC_INFO <<  "Stopping keepalive";
     }
+#endif
+#ifdef USE_KEEPALIVE
+    QMailAccountConfiguration accountCfg(_accountId);
+    ImapConfiguration imapCfg(accountCfg);
+    _accountWasPushEnabled = _accountPushEnabled;
+    _previousPushFolders = imapCfg.pushFolders();
 #endif
     QMailFolderIdList ids(_client->configurationIdleFolderIds());
     if (ids.count()) {
@@ -1820,6 +1873,31 @@ void ImapService::stopPushEmail()
     _restartPushEmailTimer->stop();
     _initiatePushEmailTimer->stop();
 }
+
+void ImapService::pushEnabledStatus(uint accountId, const QString &profileType, bool state)
+{
+    qMailLog(Messaging) << "Received new idleState for account: " << accountId << "state: " << state << "profile type: " << profileType;
+    if (accountId == _accountId.toULongLong() && profileType == QLatin1String("syncemail")) {
+        _buteoReplyReceived = true;
+        if (state != _accountPushEnabled) {
+            qMailLog(Messaging) << Q_FUNC_INFO << "Changing push enabled state to: " << state;
+            _accountPushEnabled = state;
+            if (_accountPushEnabled) {
+                if (_accountWasEnabled) {
+                    disable();
+                }
+                enable();
+                restartPushEmail();
+            } else {
+                // When it changes to true, this state is set inside "enable()"
+                // since a new client is created
+                _client->closeIdleConnections();
+                _client->setPushEnabled(state);
+                stopPushEmail();
+            }
+        }
+    }
+}
 #endif
 
 class ImapConfigurator : public QMailMessageServiceConfigurator
diff --git a/src/plugins/messageservices/imap/imapservice.h b/src/plugins/messageservices/imap/imapservice.h
index e1dcc6b0..856fb4d8 100644
--- a/src/plugins/messageservices/imap/imapservice.h
+++ b/src/plugins/messageservices/imap/imapservice.h
@@ -72,6 +72,7 @@ protected slots:
 
 #ifdef USE_KEEPALIVE
     void stopPushEmail();
+    void pushEnabledStatus(uint accountId, const QString &profileType, bool state);
 #endif
 
 private:
@@ -93,6 +94,8 @@ private:
     QTimer *_initiatePushEmailTimer;
 #ifdef USE_KEEPALIVE
     BackgroundActivity* _backgroundActivity;
+    bool _accountPushEnabled;
+    bool _buteoReplyReceived;
 #endif
 };
 
diff --git a/src/tools/systemd/messageserver5.service b/src/tools/systemd/messageserver5.service
index a5aa05a9..9622d701 100644
--- a/src/tools/systemd/messageserver5.service
+++ b/src/tools/systemd/messageserver5.service
@@ -2,7 +2,7 @@
 Description=messageserver5
 Requires=messageserver5-accounts-check.service
 Requires=booster-qt5.service
-After=booster-qt5.service
+After=msyncd.service
 After=messageserver5-accounts-check.service
 
 [Service]
-- 
2.17.1

